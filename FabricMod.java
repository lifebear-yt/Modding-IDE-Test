package io.github.railroad.objects;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.Properties;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;

public class FabricMod {

	public FabricMod(TextField name, TextField modId, TextField pkg, ComboBox version,
			String workspace/* Put "" here for now */) {
		generateMod(name, modId, pkg, version, workspace);
	}

	public static void generateMod(TextField tf, TextField tf1, TextField tf2, ComboBox c,
			String workspacestr/* Put "" here for now */) {

		// Creating Folders / Files
		File workspace = getOrCreateFolder(workspacestr);
		File proj = getOrCreateFolder(workspace.getAbsolutePath() + "\\" + tf1.getText());
		getOrCreateFolder(proj + "\\" + "src\\main\\resources\\assets\\" + tf.getText());
		getOrCreateFolder(proj + "\\" + "src\\main\\resources\\data\\" + tf.getText());
		getOrCreateFile(proj + "\\" + "gradle.properties");
		try {
			setUpGradle(tf1.getText(), tf.getText(), tf2.getText(), c.getValue().toString(),
					proj + "\\" + "gradle.properties");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		System.out.println("Setting up fabric assets");
		setUpFabric(workspace.getAbsolutePath(), tf.getText(), tf1.getText(), c.getValue().toString(), tf2.getText());
	}

	public static void setUpGradle(String name, String modID, String packageString, String version, String file)
			throws FileNotFoundException {
		System.out.println("Setting up gradle... ");
		Properties prop = new Properties();

		InputStream inputStream = new FileInputStream(new File(file));

		if (inputStream != null) {
			try {
				prop.load(inputStream);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		// Getting the mappings data for gradle.properties
		JSONArray json = readJsonFromUrl("https://meta.fabricmc.net/v1/versions/loader/" + version);
		JSONObject properties = json.getJSONObject(0);

		String fabricVersion = "0.30.2+1.17";

		URL url;
		try {
			url = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-api/fabric-api/maven-metadata.xml");
			BufferedReader read = new BufferedReader(new InputStreamReader(url.openStream()));
			String inputLine;
			while ((inputLine = read.readLine()) != null)
				if (inputLine.contains("release")) {
					fabricVersion = inputLine.replace(" ", "").replace("<release>", "").replace("</release>", "");
				}
			read.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Setting properties in gradle.properties
		prop.setProperty("org.gradle.jvmargs", "-Xmx2G");
		prop.setProperty("minecraft_version", version);
		prop.setProperty("yarn_mappings", properties.getJSONObject("mappings").getString("version"));
		prop.setProperty("loader_version", properties.getJSONObject("loader").getString("version"));
		prop.setProperty("mod_version", "1.0.0");
		prop.setProperty("maven_group", packageString);
		prop.setProperty("archives_base_name", modID);
		prop.setProperty("fabric_version", fabricVersion);

		try {
			prop.store(new FileWriter(new File(file)), "Auto-Generated By Railroad");
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("Created gradle.properties");

		// Downloading gradlew stuff
		download("gradlew.bat", /* TODO: workspace + \\ */"" + name + "\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/gradlew.bat");
		download("build.gradle", /* TODO: workspace + \\ */"" + name + "\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/build.gradle");
		download("settings.gradle", /* TODO: workspace + \\ */"" + name + "\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/settings.gradle");
		download("gradlew", /* TODO: workspace + \\ */"" + name + "\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/gradlew");
		download("gradle-wrapper.properties", /* TODO: workspace + \\ */"" + name + "\\gradle\\wrapper\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/gradle/wrapper/gradle-wrapper.properties");
		download("gradle-wrapper.jar", /* TODO: workspace + \\ */"" + name + "\\gradle\\wrapper\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/gradle/wrapper/gradle-wrapper.jar");
		download("fabric.mod.json", /* TODO: workspace + \\ */"" + name + "\\src\\main\\resources\\",
				"https://github.com/FabricMC/fabric-example-mod/raw/master/src/main/resources/fabric.mod.json");

	}

	public static void setUpFabric(String workspacestr, String name, String modID, String version, String packageString) {
		// Setting json values of fabric.mod.json
		System.out.println("Setting up fabric.mod.json");
		File fabricModFile = new File(/* TODO: workspace + \\ */"" + name + "\\src\\main\\resources\\fabric.mod.json");
		try {
			InputStream is = new FileInputStream(fabricModFile);
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
			String jsonText = readAll(rd);
			JSONObject fabricMod = new JSONObject(jsonText);
			fabricMod.put("id", modID);
			fabricMod.put("name", name);
			fabricMod.put("icon", "assets/" + modID + "/icon.png");
			fabricMod.getJSONObject("entrypoints").getJSONArray("main").put(0, packageString + "." + name);
			fabricMod.getJSONObject("depends").put("minecraft", version);
			FileWriter writer = new FileWriter(fabricModFile);
			Gson gson = new GsonBuilder().setPrettyPrinting().create();
			JsonParser jp = new JsonParser();
			JsonElement je = jp.parse(fabricMod.toString());
			// Fixing weird broken thing here
			String prettyJsonString = gson.toJson(je).replace("\\u003e\\u003d", ">=");
			writer.write(prettyJsonString);
			writer.close();
			rd.close();
			is.close();
		} catch (JSONException | IOException e) {
			e.printStackTrace();
		}
		System.out.println("Setting up " + name + ".java");
		try {
			BufferedReader in = new BufferedReader(new InputStreamReader(new URL(
					"https://raw.githubusercontent.com/FabricMC/fabric-example-mod/master/src/main/java/net/fabricmc/example/ExampleMod.java")
							.openStream()));
			String inputLine;
			File workspace = getOrCreateFolder(workspacestr);
			File proj = getOrCreateFolder(workspace.getAbsolutePath() + "\\" + name);
			File packageDir = getOrCreateFolder(proj + "\\" + "src\\main\\java\\" + packageString.replace(".", "\\"));
			File mainClass = getOrCreateFile(packageDir + "\\" + name + ".java");
			FileWriter writer = new FileWriter(mainClass);
			while ((inputLine = in.readLine()) != null) {
				writer.write(inputLine.replace("net.fabricmc.example", packageString).replace("ExampleMod", name));
			}
			writer.close();
	        in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static JSONArray readJsonFromUrl(String url) {
		try {
			InputStream is = new URL(url).openStream();
			try {
				BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
				String jsonText = readAll(rd);
				JSONArray json = new JSONArray(jsonText);
				return json;
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				is.close();
			}
		} catch (IOException e) {
			return null;
		}
		return null;
	}

	private static String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}

	public static void download(String name, String destFile, String url) {
		try {
			File proj = new File(destFile);
			if (!proj.exists()) {
				proj.mkdirs();
			}
			URL download = new URL(url);
			BufferedInputStream in = new BufferedInputStream(download.openStream());
			FileOutputStream fileOutputStream = new FileOutputStream(new File(proj.getAbsolutePath() + "\\" + name));
			System.out.println("Downloading " + name);
			byte dataBuffer[] = new byte[1024];
			int bytesRead;
			int dotNum = 0;
			int speed = 0;
			while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {
				fileOutputStream.write(dataBuffer, 0, bytesRead);
				if (dotNum == 140) {
					dotNum = 0;
					System.out.println(".");
				}
				if (speed == 1000) {
					speed = 0;
					dotNum++;
					System.out.append(".");
				}
				speed++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static File getOrCreateFile(String filePath) {
		File file = new File(filePath);
		if (!file.exists()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return file;
	}

	public static File getOrCreateFolder(String filePath) {
		File file = new File(filePath);
		if (!file.exists()) {
			file.mkdirs();
		}
		return file;
	}

}
